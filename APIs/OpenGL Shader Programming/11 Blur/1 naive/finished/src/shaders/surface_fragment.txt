#version 450 core

struct PointLight {
    vec3 position;
    vec3 color;
    float strength;
};

in vec4 fragmentPosition;
in vec3 fragmentNormal;

uniform PointLight[8] lights;
uniform vec3 tint;

out vec4 finalColor;

vec3 calculatePointLight(int i);

void main()
{
  
    //ambient
    vec3 temp = 0.2 * tint;

    //lighting
    for (int i = 0; i < 8; i++) {
        temp += calculatePointLight(i);
    }

    finalColor = vec4(temp, 1.0);
    //finalColor = vec4(tint, 1.0);

}

vec3 calculatePointLight(int i) {

    //geometric data
    vec3 fragmentLight = normalize(lights[i].position - vec3(fragmentPosition));
    
    // get lighting level
    float level = max(0.0, dot(fragmentNormal, fragmentLight));
    // quantize the level into, say, 4 levels
    level = floor(level * 2) / 2.0;
    vec3 result = lights[i].color * tint * level;

    return result;
}