#version 450

layout( triangles_adjacency ) in;
layout( triangle_strip, max_vertices = 15 ) out;

in vec3 geoPosition[];
in vec3 geoColor[];
in vec3 geoNormal[];

out vec3 fragmentPosition;
out vec3 fragmentColor;
out vec3 fragmentNormal;
flat out float IsEdge;

const float edgeWidth = 0.01;
const float edgeExtension = 0.01;

bool isFrontFacing(vec3 a, vec3 b, vec3 c) {
	
	//Is the triangle going through three points front facing?

	//z component of normal should be +ve
	return ((a.x * b.y - b.x * a.y) + (b.x * c.y - c.x * b.y) + (c.x * a.y - a.x * c.y)) > 0;
}

void emitEdgeQuad(vec3 a, vec3 b) {

	//Draw a quad along the line segment ab

	vec2 extension = edgeExtension * (b.xy - a.xy);
	vec2 ab = normalize(b.xy - a.xy);
	//for the local normal, we need a vector which is perpendicular to ab
	vec2 n = vec2(-ab.y, ab.x) * edgeWidth;

	IsEdge = 1.0;

	gl_Position = vec4(a.xy - extension, a.z, 1.0);
	EmitVertex();
	gl_Position = vec4(a.xy - extension - n, a.z, 1.0);
	EmitVertex();
	gl_Position = vec4(b.xy + extension, b.z, 1.0);
	EmitVertex();
	gl_Position = vec4(b.xy + extension - n, b.z, 1.0);
	EmitVertex();

	EndPrimitive();
}

void main() {

	vec3 a  = gl_in[0].gl_Position.xyz / gl_in[0].gl_Position.w;
	vec3 ab = gl_in[1].gl_Position.xyz / gl_in[1].gl_Position.w;
	vec3 b  = gl_in[2].gl_Position.xyz / gl_in[2].gl_Position.w;
	vec3 bc = gl_in[3].gl_Position.xyz / gl_in[3].gl_Position.w;
	vec3 c  = gl_in[4].gl_Position.xyz / gl_in[4].gl_Position.w;
	vec3 ca = gl_in[5].gl_Position.xyz / gl_in[5].gl_Position.w;

	if (isFrontFacing(a, b, c)) {
		
		if (!isFrontFacing(a, ab, b)) {
			emitEdgeQuad(a, b);
		}

		if (!isFrontFacing(b, bc, c)) {
			emitEdgeQuad(b, c);
		}

		if (!isFrontFacing(c, ca, a)) {
			emitEdgeQuad(c, a);
		}
	}

	IsEdge = 0.0;

	fragmentPosition = geoPosition[0];
	fragmentColor = geoColor[0];
	fragmentNormal = geoNormal[0];
	gl_Position = gl_in[0].gl_Position;
	EmitVertex();

	fragmentPosition = geoPosition[2];
	fragmentColor = geoColor[2];
	fragmentNormal = geoNormal[2];
	gl_Position = gl_in[2].gl_Position;
	EmitVertex();

	fragmentPosition = geoPosition[4];
	fragmentColor = geoColor[4];
	fragmentNormal = geoNormal[4];
	gl_Position = gl_in[4].gl_Position;
	EmitVertex();

	EndPrimitive();
}