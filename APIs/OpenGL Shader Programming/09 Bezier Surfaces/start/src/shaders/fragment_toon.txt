#version 450 core

struct PointLight {
    vec3 position;
    vec3 color;
    float strength;
};

in vec3 fragmentPosition;
in vec3 fragmentColor;
in vec3 fragmentNormal;
flat in float IsEdge;

uniform PointLight[8] lights;
const vec3 silhouetteColor = vec3(1.0, 1.0, 0.0);

out vec4 finalColor;

vec3 calculatePointLight(int i);

void main()
{
    if (IsEdge > 0.5) {
        finalColor = vec4(silhouetteColor,1.0);
    }
    else {
        //ambient
        vec3 temp = 0.2 * fragmentColor;

        //lighting
        for (int i = 0; i < 8; i++) {
            temp += calculatePointLight(i);
        }

        finalColor = vec4(temp, 1.0);
    }
}

vec3 calculatePointLight(int i) {

    //geometric data
    vec3 fragmentLight = normalize(lights[i].position - fragmentPosition);
    
    // get lighting level
    float level = max(0.0, dot(fragmentNormal, fragmentLight));
    // quantize the level into, say, 4 levels
    level = floor(level * 2) / 2.0;
    vec3 result = lights[i].color * fragmentColor * level;

    return result;
}