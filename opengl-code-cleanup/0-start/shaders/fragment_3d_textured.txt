#version 330 core
#extension GL_ARB_separate_shader_objects : enable
#define MAX_LIGHT_COUNT 8

struct Material {
    sampler2D diffuse;
    sampler2D specular;
};

struct Light {
    vec3 pos;
    vec3 color;
    float strength;
    bool enabled;
};

struct DirectionalLight {
    vec3 direction;
    vec3 color;
};

vec3 CalculatePointLight(Light light, vec3 cameraPosition, vec3 fragmentPosition, vec3 normal, Material fragmentMaterial, vec2 texCoord) {
    vec3 result = vec3(0.0);

    //directions
    vec3 norm = normalize(normal);
	vec3 lightDir = normalize(light.pos - fragmentPosition);
    vec3 viewDir = normalize(cameraPosition - fragmentPosition);
    vec3 reflectedDir = reflect(-lightDir, norm);

    //diffuse
	result += light.color * max(0.0,dot(norm,lightDir)) * vec3(texture(fragmentMaterial.diffuse, texCoord));
	
    //specular
    result += light.color * light.strength * pow(max(dot(viewDir, reflectedDir), 0.0),32) * vec3(texture(fragmentMaterial.specular, texCoord));
    return result;
}

vec3 CalculateDirectionalLight(DirectionalLight light, vec3 cameraPosition, vec3 fragmentPosition, vec3 normal, Material fragmentMaterial, vec2 texCoord) {
    vec3 result = vec3(0.0);

    //directions
    vec3 norm = normalize(normal);
	vec3 lightDir = normalize(-light.direction);
    vec3 viewDir = normalize(cameraPosition - fragmentPosition);
    vec3 reflectedDir = reflect(-lightDir, norm);

    //diffuse
	result += light.color * max(0.0,dot(norm,lightDir)) * vec3(texture(fragmentMaterial.diffuse, texCoord));
	
    //specular
    result += light.color * pow(max(dot(viewDir, reflectedDir), 0.0),32) * vec3(texture(fragmentMaterial.specular, texCoord));
    return result;
}

layout (location=0) in vec3 fragmentPos;
layout (location=1) in vec2 fragmentTexCoord;
layout (location=2) in vec3 fragmentNormal;
layout (location=3) in vec4 fragmentPosLightSpace;

uniform Material material;
uniform Light lights[MAX_LIGHT_COUNT];
uniform DirectionalLight sun;
uniform vec3 cameraPos;
uniform vec3 ambient;
uniform sampler2D shadowMap;

layout (location=0) out vec4 regular_colour;
layout (location=1) out vec4 bright_colour;

float ShadowCalculation(vec4 fragPosLightSpace) {
    //perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    //transform from NDC to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    //get d1 (distance along light ray towards position)
    float d1 = texture(shadowMap, projCoords.xy).r;
    //get d2 (distance along camera ray towards position)
    float d2 = projCoords.z;

    //depth bias
    vec3 normal = normalize(fragmentNormal);
    vec3 lightDir = normalize(-10 * sun.direction - fragmentPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    
    //PCF: percentage closeness filtering
    float shadow = 0.0;
    vec2 texelsize = 1.0/textureSize(shadowMap,0);
    for (int x = -1; x <= 1; ++x) {
        for (int y = -1; y <= 1; ++y) {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x,y) * texelsize).r;
            shadow += d2 - bias > pcfDepth ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;
    if (projCoords.z > 1.0) {
        shadow = 0.0;
    }
    return shadow;
}

void main()
{
    vec3 lightLevel = vec3(0.0);
    
    //ambient
    lightLevel += ambient * vec3(texture(material.diffuse, fragmentTexCoord));

    //sun
    float shadow = ShadowCalculation(fragmentPosLightSpace);
    lightLevel += (1.0 - shadow) * CalculateDirectionalLight(sun, cameraPos, fragmentPos, fragmentNormal, material, fragmentTexCoord);

    for (int i = 0; i < MAX_LIGHT_COUNT; i++) {
        if (lights[i].enabled) {
            lightLevel += CalculatePointLight(lights[i], cameraPos, fragmentPos, fragmentNormal, material, fragmentTexCoord);
        }
    }

    regular_colour = vec4(lightLevel, 1.0);
    bright_colour = vec4(vec3(0.0), 1.0);
}